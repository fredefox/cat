{-# OPTIONS --cubical --caching #-}
module Cat.Categories.Span where

open import Cat.Prelude as P hiding (_√ó_ ; fst ; snd)
open import Cat.Equivalence
open import Cat.Category

module _ {‚Ñìa ‚Ñìb : Level} (‚ÑÇ : Category ‚Ñìa ‚Ñìb)
  (let module ‚ÑÇ = Category ‚ÑÇ) (ùíú ‚Ñ¨ : ‚ÑÇ.Object) where

  open P

  private
    module _ where
      raw : RawCategory _ _
      raw = record
        { Object = Œ£[ X ‚àà ‚ÑÇ.Object ] ‚ÑÇ.Arrow X ùíú √ó ‚ÑÇ.Arrow X ‚Ñ¨
        ; Arrow = Œª{ (A , a0 , a1) (B , b0 , b1)
          ‚Üí Œ£[ f ‚àà ‚ÑÇ.Arrow A B ]
              (‚ÑÇ [ b0 ‚àò f ] ‚â° a0)
            √ó (‚ÑÇ [ b1 ‚àò f ] ‚â° a1)
            }
        ; identity = Œª{ {X , f , g} ‚Üí ‚ÑÇ.identity {X} , ‚ÑÇ.rightIdentity , ‚ÑÇ.rightIdentity}
        ; _<<<_ = Œª { {_ , a0 , a1} {_ , b0 , b1} {_ , c0 , c1} (f , f0 , f1) (g , g0 , g1)
          ‚Üí (f ‚ÑÇ.<<< g)
            , (begin
                ‚ÑÇ [ c0 ‚àò ‚ÑÇ [ f ‚àò g ] ] ‚â°‚ü® ‚ÑÇ.isAssociative ‚ü©
                ‚ÑÇ [ ‚ÑÇ [ c0 ‚àò f ] ‚àò g ] ‚â°‚ü® cong (Œª œÜ ‚Üí ‚ÑÇ [ œÜ ‚àò g ]) f0 ‚ü©
                ‚ÑÇ [ b0 ‚àò g ] ‚â°‚ü® g0 ‚ü©
                a0 ‚àé
              )
            , (begin
               ‚ÑÇ [ c1 ‚àò ‚ÑÇ [ f ‚àò g ] ] ‚â°‚ü® ‚ÑÇ.isAssociative ‚ü©
               ‚ÑÇ [ ‚ÑÇ [ c1 ‚àò f ] ‚àò g ] ‚â°‚ü® cong (Œª œÜ ‚Üí ‚ÑÇ [ œÜ ‚àò g ]) f1 ‚ü©
               ‚ÑÇ [ b1 ‚àò g ] ‚â°‚ü® g1 ‚ü©
                a1 ‚àé
              )
          }
        }

      module _ where
        open RawCategory raw

        propEqs : ‚àÄ {X' : Object}{Y' : Object} (let X , xa , xb = X') (let Y , ya , yb = Y')
                    ‚Üí (xy : ‚ÑÇ.Arrow X Y) ‚Üí isProp ((‚ÑÇ [ ya ‚àò xy ] ‚â° xa) √ó (‚ÑÇ [ yb ‚àò xy ] ‚â° xb))
        propEqs xs = propSig (‚ÑÇ.arrowsAreSets _ _) (\ _ ‚Üí ‚ÑÇ.arrowsAreSets _ _)

        arrowEq : {X Y : Object} {f g : Arrow X Y} ‚Üí fst f ‚â° fst g ‚Üí f ‚â° g
        arrowEq {X} {Y} {f} {g} p = Œª i ‚Üí p i , lemPropF propEqs (snd f) (snd g) p i

        isAssociative : IsAssociative
        isAssociative {f = f , f0 , f1} {g , g0 , g1} {h , h0 , h1} = arrowEq ‚ÑÇ.isAssociative

        isIdentity : IsIdentity identity
        isIdentity {AA@(A , a0 , a1)} {BB@(B , b0 , b1)} {f , f0 , f1} = arrowEq ‚ÑÇ.leftIdentity , arrowEq ‚ÑÇ.rightIdentity

        arrowsAreSets : ArrowsAreSets
        arrowsAreSets {X , x0 , x1} {Y , y0 , y1}
          = setSig ‚ÑÇ.arrowsAreSets Œª a ‚Üí propSet (propEqs _)

        isPreCat : IsPreCategory raw
        IsPreCategory.isAssociative isPreCat = isAssociative
        IsPreCategory.isIdentity    isPreCat = isIdentity
        IsPreCategory.arrowsAreSets isPreCat = arrowsAreSets

      open IsPreCategory isPreCat

      module _ {ùïè ùïê : Object} where
        open Œ£ ùïè renaming (fst to X ; snd to x)
        open Œ£ x renaming (fst to xa ; snd to xb)
        open Œ£ ùïê renaming (fst to Y ; snd to y)
        open Œ£ y renaming (fst to ya ; snd to yb)
        open import Cat.Equivalence using (composeIso) renaming (_‚âÖ_ to _‚âÖ_)

        -- The proof will be a sequence of isomorphisms between the
        -- following 4 types:
        T0 = ((X , xa , xb) ‚â° (Y , ya , yb))
        T1 = (Œ£[ p ‚àà (X ‚â° Y) ] (PathP (Œª i ‚Üí ‚ÑÇ.Arrow (p i) ùíú) xa ya) √ó (PathP (Œª i ‚Üí ‚ÑÇ.Arrow (p i) ‚Ñ¨) xb yb))
        T2 = Œ£ (X ‚ÑÇ.‚âä Y) (Œª iso
            ‚Üí let p = ‚ÑÇ.isoToId iso
            in
            ( PathP (Œª i ‚Üí ‚ÑÇ.Arrow (p i) ùíú) xa ya)
            √ó PathP (Œª i ‚Üí ‚ÑÇ.Arrow (p i) ‚Ñ¨) xb yb
            )
        T3 = ((X , xa , xb) ‚âä (Y , ya , yb))

        step0 : T0 ‚âÖ T1
        step0
          = (Œª p ‚Üí cong fst p , cong (fst ‚àò snd) p , cong (snd ‚àò snd) p)
          -- , (Œª x  ‚Üí Œª i ‚Üí fst x i , (fst (snd x) i) , (snd (snd x) i))
          , (Œª{ (p , q , r) ‚Üí Œ£‚â° (p , Œª i ‚Üí q i , r i)})
          , funExt (Œª{ p ‚Üí refl})
          , funExt (Œª{ (p , q , r) ‚Üí refl})

        step1 : T1 ‚âÖ T2
        step1
          = symIso
              (isoSigFst
                {A = (X ‚ÑÇ.‚âä Y)}
                {B = (X ‚â° Y)}
                (‚ÑÇ.groupoidObject _ _)
                {Q = \ p ‚Üí (PathP (Œª i ‚Üí ‚ÑÇ.Arrow (p i) ùíú) xa ya) √ó (PathP (Œª i ‚Üí ‚ÑÇ.Arrow (p i) ‚Ñ¨) xb yb)}
                ‚ÑÇ.isoToId
                (symIso (_ , ‚ÑÇ.asTypeIso {X} {Y}) .snd)
              )

        step2 : T2 ‚âÖ T3
        step2
          = ( Œª{ (iso@(f , f~ , inv-f) , p , q)
              ‚Üí ( f  , sym (‚ÑÇ.domain-twist-sym  iso p) , sym (‚ÑÇ.domain-twist-sym iso q))
              , ( f~ , sym (‚ÑÇ.domain-twist      iso p) , sym (‚ÑÇ.domain-twist     iso q))
              , arrowEq (fst inv-f)
              , arrowEq (snd inv-f)
              }
            )
          , (Œª{ (f , f~ , inv-f , inv-f~) ‚Üí
            let
              iso : X ‚ÑÇ.‚âä Y
              iso = fst f , fst f~ , cong fst inv-f , cong fst inv-f~
              p : X ‚â° Y
              p = ‚ÑÇ.isoToId iso
              pA : ‚ÑÇ.Arrow X ùíú ‚â° ‚ÑÇ.Arrow Y ùíú
              pA = cong (Œª x ‚Üí ‚ÑÇ.Arrow x ùíú) p
              pB : ‚ÑÇ.Arrow X ‚Ñ¨ ‚â° ‚ÑÇ.Arrow Y ‚Ñ¨
              pB = cong (Œª x ‚Üí ‚ÑÇ.Arrow x ‚Ñ¨) p
              k0 = begin
                coe pB xb ‚â°‚ü® ‚ÑÇ.coe-dom iso ‚ü©
                xb ‚ÑÇ.<<< fst f~ ‚â°‚ü® snd (snd f~) ‚ü©
                yb ‚àé
              k1 = begin
                coe pA xa ‚â°‚ü® ‚ÑÇ.coe-dom iso ‚ü©
                xa ‚ÑÇ.<<< fst f~ ‚â°‚ü® fst (snd f~) ‚ü©
                ya ‚àé
            in iso , coe-lem-inv k1 , coe-lem-inv k0})
          , funExt (Œª x ‚Üí lemSig
              (Œª x ‚Üí propSig prop0 (Œª _ ‚Üí prop1))
              (Œ£‚â° (refl , ‚ÑÇ.propIsomorphism _ _ _)))
          , funExt (Œª{ (f , _) ‚Üí lemSig propIsomorphism (Œ£‚â° (refl , propEqs _ _ _))})
            where
            prop0 : ‚àÄ {x} ‚Üí isProp (PathP (Œª i ‚Üí ‚ÑÇ.Arrow (‚ÑÇ.isoToId x i) ùíú) xa ya)
            prop0 {x} = pathJ (Œª y p ‚Üí ‚àÄ x ‚Üí isProp (PathP (Œª i ‚Üí ‚ÑÇ.Arrow (p i) ùíú) xa x)) (Œª x ‚Üí ‚ÑÇ.arrowsAreSets _ _) (‚ÑÇ.isoToId x) ya
            prop1 : ‚àÄ {x} ‚Üí isProp (PathP (Œª i ‚Üí ‚ÑÇ.Arrow (‚ÑÇ.isoToId x i) ‚Ñ¨) xb yb)
            prop1 {x} = pathJ (Œª y p ‚Üí ‚àÄ x ‚Üí isProp (PathP (Œª i ‚Üí ‚ÑÇ.Arrow (p i) ‚Ñ¨) xb x)) (Œª x ‚Üí ‚ÑÇ.arrowsAreSets _ _) (‚ÑÇ.isoToId x) yb
        -- One thing to watch out for here is that the isomorphisms going forwards
        -- must compose to give idToIso
        iso
          : ((X , xa , xb) ‚â° (Y , ya , yb))
          ‚âÖ ((X , xa , xb) ‚âä (Y , ya , yb))
        iso = step0 ‚äô step1 ‚äô step2
          where
          infixl 5 _‚äô_
          _‚äô_ = composeIso
        equiv1
          : ((X , xa , xb) ‚â° (Y , ya , yb))
          ‚âÉ ((X , xa , xb) ‚âä (Y , ya , yb))
        equiv1 = _ , fromIso _ _ (snd iso)

      univalent : Univalent
      univalent = univalenceFrom‚âÉ equiv1

      isCat : IsCategory raw
      IsCategory.isPreCategory isCat = isPreCat
      IsCategory.univalent     isCat = univalent

  span : Category _ _
  span = record
    { raw = raw
    ; isCategory = isCat
    }
