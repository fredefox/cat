{-# OPTIONS --allow-unsolved-metas #-}
{-# OPTIONS --cubical              #-}
module Cat.Category.Monoid where

open import Agda.Primitive

open import Cat.Category
open import Cat.Category.Product
open import Cat.Category.Functor
import Cat.Categories.Cat as Cat
open import Cat.Prelude hiding (_√ó_ ; empty)

-- TODO: Incorrect!
module _ {‚Ñìa ‚Ñìb : Level} where
  private
    ‚Ñì = lsuc (‚Ñìa ‚äî ‚Ñìb)

    -- *If* the category of categories existed `_√ó_` would be equivalent to the
    -- one brought into scope by doing:
    --
    --     open HasProducts (Cat.hasProducts unprovable) using (_√ó_)
    --
    -- Since it doesn't we'll make the following (definitionally equivalent) ad-hoc definition.
    _√ó_ : ‚àÄ {‚Ñìa ‚Ñìb} ‚Üí Category ‚Ñìa ‚Ñìb ‚Üí Category ‚Ñìa ‚Ñìb ‚Üí Category ‚Ñìa ‚Ñìb
    ‚ÑÇ √ó ùîª = Cat.CatProduct.object ‚ÑÇ ùîª

  record RawMonoidalCategory (‚ÑÇ : Category ‚Ñìa ‚Ñìb) : Set ‚Ñì where
    open Category ‚ÑÇ public hiding (IsAssociative)
    field
      empty  : Object
      -- aka. tensor product, monoidal product.
      append : Functor (‚ÑÇ √ó ‚ÑÇ) ‚ÑÇ

    module F = Functor append

    _‚äó_ = append
    mappend = F.fmap

    IsAssociative : Set _
    IsAssociative = {A B : Object} ‚Üí (f g h : Arrow A A) ‚Üí mappend ({!mappend!} , {!mappend!}) ‚â° mappend (f , mappend (g , h))

  record MonoidalCategory (‚ÑÇ : Category ‚Ñìa ‚Ñìb) : Set ‚Ñì where
    field
      raw : RawMonoidalCategory ‚ÑÇ
    open RawMonoidalCategory raw public

module _ {‚Ñìa ‚Ñìb : Level} (‚ÑÇ : Category ‚Ñìa ‚Ñìb) {monoidal : MonoidalCategory ‚ÑÇ} {hasProducts : HasProducts ‚ÑÇ} where
  private
    ‚Ñì = ‚Ñìa ‚äî ‚Ñìb

  open MonoidalCategory monoidal public hiding (mappend)
  open HasProducts hasProducts

  record MonoidalObject (M : Object) : Set ‚Ñì where
    field
      mempty  : Arrow empty M
      mappend : Arrow (M √ó M) M
